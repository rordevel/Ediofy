- provide :title do
  Ediofy conversation #{@conversation.title}
.pageContent
  %section.content-page-video.content-page-img.manageContentMargin
    .container
      .row
        .col-md-8
          .contentAreaBox
            .boxOuterWhite
              - class_name = @conversation.class.name.downcase
              .publishedAt
                .row
                  .col-sm-8.col-xs-4.col-md-4.vid-tit.wid-blk
                    .row
                      .col-sm-12.col-xs-12.auth-name.commet-icon.col-md-12
                        = render 'ediofy/groups/content_author', content: @conversation
                  .col-sm-8.col-xs-8.col-md-8.text-right.wid-blk.pub-pd.conver
                    = render 'ediofy/groups/add_to_playlist',  id: 'add_content_to_playlist', content:@conversation, form_action: '/'
                    - if (user_signed_in? && @conversation.group_exclusive)
                      = link_to "Back to group", ediofy_group_path(@conversation.groups.first), class: 'btn'                          
                    - if (user_signed_in? && @conversation.group_exclusive && current_user == @conversation.user )
                      .span.link.addToPlaylistBtn.clrpink.btn.button{'data-target' => '#add_content_to_playlist', 'data-toggle'  => 'modal'}
                        Add to playlist
                    - if user_signed_in? && current_user == @conversation.user
                      %a{href: send("edit_ediofy_#{class_name}_path", @conversation), class: 'btn button secoundryBtn edit-me follow-btn clrpink'}
                        %i.fa.fa-pencil
                        Edit conversation
              .row
                .col-sm-12.col-xs-12.col-md-12.vid-tit.wid-blk
                  %h1=@conversation.title
                .col-sm-12.col-xs-12.col-md-12.wid-blk.pub-pd
                  %p
                    %span= @conversation.created_at.strftime("Published on %B %d, %Y")
              .video-del
                .postContent.overFlowHidden.paddinTop0
                  = simple_format(@conversation.description).gsub(URI.regexp, '<a href="\0">\0</a>').html_safe
              - if @images.count > 0
                .que-slider
                  - if @images.count == 1
                    = image_tag @images.first.large_url
                  - else
                    .banner-slider
                      - @images.each do |image|
                        %div
                          = image_tag image.large_url
                    .inner-slider
                      - @images.each do |image|
                        .pad
                          = image_tag image.small_url
                -#- if @conversation.description.length > 500
                -#  %a.seeMoreContent.show-more Show More
              .three-col-btn
                - @conversation.tags.each do |tag|
                  = link_to tag.name, ediofy_root_path('[q]' => tag.name, :button => 'Search', :utf8 => 'âœ“')
              .row.brd-bot.ex-pd
                = render 'ediofy/groups/share_to_group', id: 'share_conversation_to_group', form_action: share_to_group_ediofy_conversation_path

                .col-sm-6.col-xs-6.col-md-6.soc-me.wid-blk.msg-seen
                  -unless @conversation.group_exclusive? && !@conversation.groups.first.ispublic?
                    %p SHARE:
                    %ul
                      %li
                        .span.link.btn.button.secoundryBtn.edit-me.group.follow-btn.clrpink{'data-target' => '#share_conversation_to_group', 'data-toggle' => 'modal'}
                          Share to group
                      %li
                        = facebook_share(ediofy_conversation_path(@conversation), @conversation.title)
                      %li
                        = twitter_share(ediofy_conversation_path(@conversation), @conversation.title)
                      %li
                        = linkedin_share(ediofy_conversation_path(@conversation), @conversation.title)

                .col-sm-3.col-xs-3.col-md-3
                  = render 'ediofy/playlists/playlist_links', locals: { playlist: @playlist, previous_playlist_content: @previous_playlist_content, next_playlist_content: @next_playlist_content } if @playlist

                .col-sm-3.col-xs-3.col-md-3.text-right.rep-lik-un.wid-blk
                  = render 'ediofy/shared/toolbar/votable', votable: @conversation
              .brd-bottom{ id: ("content-#{@conversation.id}-report-container"), class: ('reported' if @conversation.reports.by(current_user).exists?) }
                =# render partial: 'ediofy/shared/toolbar/report', object: @conversation, as: :reportable
            = render 'ediofy/shared/comments/section', commentable: @conversation
        .col-md-4
          = render 'ediofy/playlists/miniplaylist', locals: { playable: @conversation } if @playlist
          .row
            .rel-con
              #related-content.slid-con-tab
                %ul#related-content-tabs.nav.nav-tabs
                  %li
                    %a{"data-url" => ediofy_related_index_path({type: 'conversations', return_type: 'media', id: @conversation.id}), "data-link" => 'media', :href => "#Media"} Media
                    %li
                      %a{"data-url" => ediofy_related_index_path({type: 'conversations', return_type: 'questions', id: @conversation.id}), "data-link" => 'questions', :href => "#Questions"} Questions
                  %li.active
                    %a{"data-url" => ediofy_related_index_path({type: 'conversations', return_type: 'conversations', id: @conversation.id}), "data-link" => 'conversations', :href => "#Conversations"} Conversations
                .tab-content.infinite-table
                  .items
                  .load-
                %br
